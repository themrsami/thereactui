{"version":3,"file":"ButtonGroup.js","sourceRoot":"","sources":["../../../components/ui/ButtonGroup/ButtonGroup.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,MAAM,UAAU,WAAW,CAAC,EAC1B,QAAQ,EACR,WAAW,GAAG,YAAY,EAC1B,SAAS,GAAG,EAAE,EACG;IACjB,MAAM,UAAU,GAAG,aAAa,CAAC;IAEjC,MAAM,iBAAiB,GAAG;QACxB,UAAU,EAAE,UAAU;QACtB,QAAQ,EAAE,UAAU;KACZ,CAAC;IAEX,MAAM,iBAAiB,GAAG;QACxB,UAAU;QACV,iBAAiB,CAAC,WAA6C,CAAC;QAChE,SAAS;KACV,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAEZ,yCAAyC;IACzC,MAAM,iBAAiB,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACtE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC;YAAE,OAAO,KAAK,CAAC;QAE/C,MAAM,OAAO,GAAG,KAAK,KAAK,CAAC,CAAC;QAC5B,MAAM,MAAM,GAAG,KAAK,KAAK,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAE5D,IAAI,iBAAiB,GAAG,EAAE,CAAC;QAE3B,IAAI,WAAW,KAAK,YAAY,EAAE,CAAC;YACjC,IAAI,CAAC,OAAO;gBAAE,iBAAiB,IAAI,SAAS,CAAC;QAC/C,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,OAAO;gBAAE,iBAAiB,IAAI,SAAS,CAAC;QAC/C,CAAC;QAED,MAAM,UAAU,GAAG,KAAK,CAAC,KAAY,CAAC;QAEtC,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE;YAC/B,GAAG,UAAU;YACb,SAAS,EAAE,GAAG,UAAU,CAAC,SAAS,IAAI,EAAE,IAAI,iBAAiB,EAAE,CAAC,IAAI,EAAE;SACvE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,CACL,cAAK,SAAS,EAAE,iBAAiB,EAAE,IAAI,EAAC,OAAO,YAC5C,iBAAiB,GACd,CACP,CAAC;AACJ,CAAC","sourcesContent":["'use client';\r\n\r\nimport React from 'react';\r\nimport type { ButtonGroupProps } from './ButtonGroup.types';\r\n\r\nexport function ButtonGroup({ \r\n  children, \r\n  orientation = 'horizontal',\r\n  className = '' \r\n}: ButtonGroupProps) {\r\n  const baseStyles = 'inline-flex';\r\n  \r\n  const orientationStyles = {\r\n    horizontal: 'flex-row',\r\n    vertical: 'flex-col',\r\n  } as const;\r\n  \r\n  const combinedClassName = [\r\n    baseStyles,\r\n    orientationStyles[orientation as keyof typeof orientationStyles],\r\n    className,\r\n  ].join(' ');\r\n\r\n  // Clone children and add border handling\r\n  const processedChildren = React.Children.map(children, (child, index) => {\r\n    if (!React.isValidElement(child)) return child;\r\n    \r\n    const isFirst = index === 0;\r\n    const isLast = index === React.Children.count(children) - 1;\r\n    \r\n    let additionalClasses = '';\r\n    \r\n    if (orientation === 'horizontal') {\r\n      if (!isFirst) additionalClasses += ' -ml-px';\r\n    } else {\r\n      if (!isFirst) additionalClasses += ' -mt-px';\r\n    }\r\n    \r\n    const childProps = child.props as any;\r\n    \r\n    return React.cloneElement(child, {\r\n      ...childProps,\r\n      className: `${childProps.className || ''} ${additionalClasses}`.trim(),\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div className={combinedClassName} role=\"group\">\r\n      {processedChildren}\r\n    </div>\r\n  );\r\n}\r\n"]}